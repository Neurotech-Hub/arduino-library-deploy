name: Arduino Library Deploy
description: A GitHub Action that checks the library version, validates it, merges the PR, and creates a release.
branding:
  icon: "archive"
  color: "green"
inputs:
  GITHUB_TOKEN:
    description: 'GitHub token for API requests.'
    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout PR Code
      uses: actions/checkout@v3

    - name: Get Version from Pull Request
      id: pr_version
      run: |
        pr_version=$(grep '^version=' library.properties | cut -d'=' -f2)
        echo "PR version: $pr_version"
        echo "pr_version=$pr_version" >> $GITHUB_ENV
      shell: bash

    - name: Fetch Main Branch Version
      run: |
        git fetch origin main
        git checkout origin/main -- library.properties
        main_version=$(grep '^version=' library.properties | cut -d'=' -f2)
        echo "Main version: $main_version"
        echo "main_version=$main_version" >> $GITHUB_ENV
      shell: bash

    - name: Validate Versioning Rules
      id: validate_version
      run: |
        IFS='.' read -r pr_major pr_minor pr_patch <<< "$pr_version"
        IFS='.' read -r main_major main_minor main_patch <<< "$main_version"

        if [ "$pr_major" -lt "$main_major" ] || 
           { [ "$pr_major" -eq "$main_major" ] && [ "$pr_minor" -lt "$main_minor" ]; } || 
           { [ "$pr_major" -eq "$main_major" ] && [ "$pr_minor" -eq "$main_minor" ] && [ "$pr_patch" -le "$main_patch" ]; }; then
          echo "Error: PR version ($pr_version) is not valid. It must increment according to semantic versioning rules."
          exit 1
        fi

        if [ "$pr_major" -gt "$main_major" ] && { [ "$pr_minor" -ne 0 ] || [ "$pr_patch" -ne 0 ]; }; then
          echo "Error: Major version increment requires MINOR and PATCH to reset to 0."
          exit 1
        fi

        if [ "$pr_major" -eq "$main_major" ] && [ "$pr_minor" -gt "$main_minor" ] && [ "$pr_patch" -ne 0 ]; then
          echo "Error: Minor version increment requires PATCH to reset to 0."
          exit 1
        fi

        echo "Version $pr_version is valid."
      shell: bash

    - name: Merge Pull Request
      if: success() && steps.validate_version.outcome == 'success'
      run: |
        PR_NUMBER=$(jq --raw-output .pull_request.number $GITHUB_EVENT_PATH)
        PR_TITLE=$(jq --raw-output .pull_request.title $GITHUB_EVENT_PATH)
        echo "Merging PR #${PR_NUMBER} titled \"${PR_TITLE}\""
        API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${PR_NUMBER}/merge"
        curl -X PUT "${API_URL}" \
          -H "Authorization: token ${{ inputs.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"commit_title":"Merge PR #'"${PR_NUMBER}"' - '"${PR_TITLE}"'","merge_method":"squash"}'
        echo "Pull request #${PR_NUMBER} merged successfully."
      shell: bash

    - name: Create GitHub Release
      if: success()
      uses: actions/create-release@v1
      with:
        tag_name: v${{ env.pr_version }}
        release_name: Release v${{ env.pr_version }}
        body: |
          **Changelog**
          - Updated to version ${{ env.pr_version }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        
